// <auto-generated />
using System;
using Inventory.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Inventory.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20210825121604_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Inventory.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("EntityGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_guid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Inventory.Domain.ContactPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<Guid>("EntityGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_guid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.HasKey("Id")
                        .HasName("pk_contact_person");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_contact_person_supplier_id");

                    b.ToTable("contact_person");
                });

            modelBuilder.Entity("Inventory.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<Guid>("EntityGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_guid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("Inventory.Domain.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("AMountOrdered")
                        .HasColumnType("numeric")
                        .HasColumnName("a_mount_ordered");

                    b.Property<decimal>("AmountInStock")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_in_stock");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("EntityGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_guid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("selling_price");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("pk_items");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_items_category_id");

                    b.ToTable("items");
                });

            modelBuilder.Entity("Inventory.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("EntityGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_guid");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("text")
                        .HasColumnName("order_number");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_orders_supplier_id");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Inventory.Domain.OrderNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OrderNumbers")
                        .HasColumnType("text")
                        .HasColumnName("order_numbers");

                    b.HasKey("Id")
                        .HasName("pk_order_numbers");

                    b.ToTable("order_numbers");
                });

            modelBuilder.Entity("Inventory.Domain.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("EntityGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_guid");

                    b.Property<string>("SalesNumber")
                        .HasColumnType("text")
                        .HasColumnName("sales_number");

                    b.HasKey("Id")
                        .HasName("pk_sales");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_sales_customer_id");

                    b.ToTable("sales");
                });

            modelBuilder.Entity("Inventory.Domain.SalesNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("SaleNumber")
                        .HasColumnType("text")
                        .HasColumnName("sale_number");

                    b.HasKey("Id")
                        .HasName("pk_sales_numbers");

                    b.ToTable("sales_numbers");
                });

            modelBuilder.Entity("Inventory.Domain.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<Guid>("EntityGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_guid");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_suppliers");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("ItemOrder", b =>
                {
                    b.Property<int>("ItemsId")
                        .HasColumnType("integer")
                        .HasColumnName("items_id");

                    b.Property<int>("OrdersId")
                        .HasColumnType("integer")
                        .HasColumnName("orders_id");

                    b.HasKey("ItemsId", "OrdersId")
                        .HasName("pk_item_order");

                    b.HasIndex("OrdersId")
                        .HasDatabaseName("ix_item_order_orders_id");

                    b.ToTable("item_order");
                });

            modelBuilder.Entity("ItemSale", b =>
                {
                    b.Property<int>("ItemsId")
                        .HasColumnType("integer")
                        .HasColumnName("items_id");

                    b.Property<int>("SalesId")
                        .HasColumnType("integer")
                        .HasColumnName("sales_id");

                    b.HasKey("ItemsId", "SalesId")
                        .HasName("pk_item_sale");

                    b.HasIndex("SalesId")
                        .HasDatabaseName("ix_item_sale_sales_id");

                    b.ToTable("item_sale");
                });

            modelBuilder.Entity("Inventory.Domain.ContactPerson", b =>
                {
                    b.HasOne("Inventory.Domain.Supplier", null)
                        .WithMany("ContactPersons")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk_contact_person_suppliers_supplier_id");
                });

            modelBuilder.Entity("Inventory.Domain.Item", b =>
                {
                    b.HasOne("Inventory.Domain.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_items_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Inventory.Domain.Order", b =>
                {
                    b.HasOne("Inventory.Domain.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk_orders_suppliers_supplier_id");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Inventory.Domain.Sale", b =>
                {
                    b.HasOne("Inventory.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_sales_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ItemOrder", b =>
                {
                    b.HasOne("Inventory.Domain.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .HasConstraintName("fk_item_order_items_items_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory.Domain.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .HasConstraintName("fk_item_order_orders_orders_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemSale", b =>
                {
                    b.HasOne("Inventory.Domain.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .HasConstraintName("fk_item_sale_items_items_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory.Domain.Sale", null)
                        .WithMany()
                        .HasForeignKey("SalesId")
                        .HasConstraintName("fk_item_sale_sales_sales_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inventory.Domain.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Inventory.Domain.Supplier", b =>
                {
                    b.Navigation("ContactPersons");
                });
#pragma warning restore 612, 618
        }
    }
}
